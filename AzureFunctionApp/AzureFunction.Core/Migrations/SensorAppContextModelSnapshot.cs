// <auto-generated />
using System;
using AzureFunction.Core.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AzureFunction.Core.Migrations
{
    [DbContext(typeof(SensorAppContext))]
    partial class SensorAppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AzureFunction.Core.Entities.SensorAlarmEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("FiredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("SensorId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SensorId", "Identifier")
                        .IsUnique();

                    b.ToTable("SensorAlarms", (string)null);
                });

            modelBuilder.Entity("AzureFunction.Core.Entities.SensorDataEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AggregationType")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("SensorId")
                        .HasColumnType("bigint");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("SensorId", "AggregationType", "CreatedAt")
                        .IsUnique();

                    b.ToTable("SensorData", (string)null);
                });

            modelBuilder.Entity("AzureFunction.Core.Entities.SensorEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("BoxId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("LastSeen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Max")
                        .HasColumnType("double precision");

                    b.Property<double>("Min")
                        .HasColumnType("double precision");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BoxId", "Type")
                        .IsUnique();

                    b.ToTable("Sensors", (string)null);
                });

            modelBuilder.Entity("AzureFunction.Core.Entities.SensorInformationEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModelNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("SensorId")
                        .HasColumnType("bigint");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SensorId")
                        .IsUnique();

                    b.ToTable("SensorInformations", (string)null);
                });

            modelBuilder.Entity("AzureFunction.Core.Entities.SensorAlarmEntity", b =>
                {
                    b.HasOne("AzureFunction.Core.Entities.SensorEntity", "Sensor")
                        .WithMany("Alarms")
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("AzureFunction.Core.Entities.SensorDataEntity", b =>
                {
                    b.HasOne("AzureFunction.Core.Entities.SensorEntity", "Sensor")
                        .WithMany()
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("AzureFunction.Core.Entities.SensorInformationEntity", b =>
                {
                    b.HasOne("AzureFunction.Core.Entities.SensorEntity", null)
                        .WithOne("Information")
                        .HasForeignKey("AzureFunction.Core.Entities.SensorInformationEntity", "SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AzureFunction.Core.Entities.SensorEntity", b =>
                {
                    b.Navigation("Alarms");

                    b.Navigation("Information")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
