name: $(date:yyyy.MM.dd)$(rev:.r)
trigger:
  batch: true
  branches:
    include:
      - master

stages:
  - stage: Build
    displayName: Build function app
    jobs:
      - job: Build
        displayName: Build app
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self
            clean: true

          - task: UseDotNet@2
            displayName: 'Use .Net Core sdk 6.x'
            inputs:
              version: 6.0.x

          - task: DotNetCoreCLI@2
            displayName: 'dotnet restore'
            inputs:
              command: 'restore'
              projects: '**/*.csproj'

          - task: DotNetCoreCLI@2
            displayName: 'dotnet test'
            inputs:
              command: 'test'
              projects: '**/*.csproj'
              arguments: '--no-restore --configuration Release --framework net6.0'

          - task: DotNetCoreCLI@2
            displayName: 'Create Package'
            inputs:
              command: 'publish'
              projects: 'AzureFunctionApp/AzureFunction.App/AzureFunction.App.csproj'
              publishWebProjects: false
              arguments: '--no-restore --no-build --configuration Release --output $(Build.BinariesDirectory)/output/ --framework netcoreapp3.1'
              zipAfterPublish: false
              
          - task: Docker@2
            displayName: 'Build Docker image'
            inputs:
              containerRegistry: '$(dockerRegistry)'
              repository: 'functionapp'
              command: build
              Dockerfile: './AzureFunctionApp/AzureFunction.Infrastructure/Pipelines/Dockerfile'
              buildContext: '$(Build.BinariesDirectory)/output/AzureFunction.App/'
              tags: |
                $(Build.BuildNumber)
              addPipelineData: false

          - task: Docker@2
            displayName: 'Push Docker image'
            inputs:
              containerRegistry: '$(dockerRegistry)'
              repository: 'functionapp'
              command: push
              tags: |
                $(Build.BuildNumber)
              addPipelineData: false

          - pwsh: |
              rm -rf $(Build.BinariesDirectory)/output/AzureFunction.App
            displayName: 'Clean up'

          - task: CopyFiles@2
            displayName: 'Copy resource template to artifacts'
            inputs:
              SourceFolder: AzureFunctionApp/AzureFunction.Infrastructure/Templates 
              Contents: '*.json'
              TargetFolder: '$(build.artifactstagingdirectory)'

          - publish: $(build.artifactstagingdirectory)
            displayName: 'Publish Artifact: drop'
            artifact: drop
            condition: succeededOrFailed()
  
  - stage: Deploy
    displayName: Deploy function app
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    jobs:
      - deployment: Deploy
        pool:
          vmImage: 'ubuntu-latest'
        environment: 'Production'
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: drop

                - task: AzureResourceManagerTemplateDeployment@3
                  displayName: Deploy resource group infrastructure
                  inputs:
                    deploymentScope: 'Resource Group'
                    azureResourceManagerConnection: $(azureResourceManagerConnection)
                    subscriptionId: $(subscriptionId)
                    action: 'Create Or Update Resource Group'
                    resourceGroupName: $(resourceGroupName)
                    location: $(location)
                    templateLocation: 'Linked artifact'
                    csmFile: '$(Pipeline.Workspace)/drop/resourceGroup.docker.iac.json'
                    deploymentMode: 'Incremental'
                    deploymentName: 'continuous-deployment'
                    overrideParameters: '-dockerRegistryUrl "$(dockerRegistryUrl)" -dockerRegistryUser "$(dockerRegistryUser)" -dockerRegistryPassword "$(dockerRegistryPassword)"'

                - task: AzureFunctionAppContainer@1
                  displayName: Deploy function app as container
                  inputs:
                    azureSubscription: $(azureResourceManagerConnection)
                    appName: $(appName)
                    imageName: '$(dockerRegistryUrl)/functionapp:$(Build.BuildNumber)'
                    appSettings: '-FUNCTIONS_EXTENSION_VERSION ~4'